{
	// Place your snippets for yaml here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ArgoCD Project": {
		"prefix": "project",
		"description": "Project definition for ArgoCD, see example https://argoproj.github.io/argo-cd/operator-manual/project.yaml",
		"body": [
			"apiVersion: argoproj.io/v1alpha1",
			"kind: AppProject",
			"metadata:",
			"  name: $1",
			"  namespace: argocd",
			"spec:",
			"  description: $2",
			"  sourceRepos:",
			"  - '*'",
			"  destinations:",
			"  - namespace: $3",
			"    server: https://kubernetes.default.svc"
		]
	},
	"ArgoCD Project Destination": {
		"prefix": "destination",
		"description": "Destination block for an ArgoCD Project",
		"body": [
			"- namespace: $1",
			"  server: https://kubernetes.default.svc"
		]
	},
	"ArgoCD Application": {
		"prefix": "application",
		"description": "Application definition for ArgoCD, see example https://argoproj.github.io/argo-cd/operator-manual/application.yaml",
		"body": [
			"apiVersion: argoproj.io/v1alpha1",
			"kind: Application",
			"metadata:",
			"  name: $2",
			"  namespace: argocd",
			"# Add a this finalizer ONLY if you want these to cascade delete.",
			"finalizers:",
			"- resources-finalizer.argocd.argoproj.io",
			"spec:",
			"  project: $1",
			"  source:",
			"    repoURL: https://gitlab.com/matthew.parlette/yamato",
			"    targetRevision: HEAD",
			"    path: $1/$2",
			"    # helm specific config",
			"    # helm:",
			"    #   Extra parameters to set (same as setting through values.yaml, but these take precedence)",
			"    #   parameters:",
			"    #   - name: \"\"",
			"    #     value: mydomain.example.com",
			"    #   releaseName: $2",
			"    #   valueFiles:",
			"    #   - values.yaml",
			"    # directory:",
			"    #   recurse: true",
			"  destination:",
			"    server: https://kubernetes.default.svc",
			"    namespace: $1",
			"  syncPolicy:",
			"    automated:",
			"      prune: true",
            "  sourceRepos:",
            "  - '*'",
            "  clusterResourceWhitelist:",
            "  - group: '*'",
            "    kind: '*'"
		]
	},
	"Deployment": {
		"prefix": "deployment",
		"description": "Kubernetes Deployment for parlette.us",
		"body": [
			"apiVersion: extensions/v1beta1",
			"kind: Deployment",
			"metadata:",
			"  name: $2",
			"  namespace: $1",
			"  labels:",
			"    app: $2",
			"spec:",
			"  replicas: 1",
			"  template:",
			"    metadata:",
			"      labels:",
			"        app: $2",
			"    spec:",
			"      restartPolicy: Always",
			"      containers:",
			"      - name: $2",
			"        image: $3/$2",
			"        imagePullPolicy: Always",
			"        ports:",
			"        - containerPort: $4",
			"          name: https",
			"        # env:",
			"        # - name: ",
			"        #   value: ",
			"        envFrom:",
			"        - configMapRef:",
			"            name: $2",
			"        # - secretRef:",
			"        #     name: $2",
			"        volumeMounts:",
			"        - name: $2-pvc",
			"          mountPath: $5",
			"          readOnly: false",
			"        # resources:",
			"        #   requests:",
			"        #     memory: 128Mi",
			"        #     cpu: 250m",
			"        #   limits:",
			"        #     memory: 2Gi",
			"        #     cpu: 2",
			"        # livenessProbe:",
			"        #   httpGet:",
			"        #     path: /_status/healthz",
			"        #     port: 5000",
			"        #   initialDelaySeconds: 90",
			"        #   timeoutSeconds: 10",
			"        # readinessProbe:",
			"        #   httpGet:",
			"        #     path: /_status/healthz",
			"        #     port: 5000",
			"        #   initialDelaySeconds: 30",
			"        #   timeoutSeconds: 10",
			"      volumes:",
			"      # - name: cephfs-volume",
			"      #   cephfs:",
			"      #     monitors:",
			"      #     - 192.168.86.45:6789",
			"      #   path: ",
			"      #   user: admin",
			"      #   secretRef:",
			"      #     name: ceph-admin-secret",
			"      #   readOnly: false",
			"      - name: $2-pvc",
			"        persistentVolumeClaim:",
			"          claimName: $2",
		]
	},
	"Persistent Volume Claim": {
		"prefix": "pvc",
		"description": "Persistent Volume Claim",
		"body": [
			"apiVersion: v1",
			"kind: PersistentVolumeClaim",
			"metadata:",
			"  name: $2",
			"  namespace: $1",
			"  labels:",
			"    app: $2",
			"spec:",
			"  storageClassName: cephfs",
			"  accessModes:",
			"    - ReadWriteOnce",
			"  resources:",
			"    requests:",
			"      storage: $3Gi"
		]
	},
	"ConfigMap - linuxserver.io": {
		"prefix": "cfg",
		"description": "ConfigMap for a LinuxServer.io application",
		"body": [
			"apiVersion: v1",
			"kind: ConfigMap",
			"metadata:",
			"  name: $2",
			"  namespace: $1",
			"  labels:",
			"    app: $2",
			"data:",
			"  PUID: \"1000\"",
			"  PGID: \"1000\"",
			"  TZ: America/New_York"
		]
	},
	"Service": {
		"prefix": "svc",
		"description": "Kubernetes Service",
		"body": [
			"apiVersion: v1",
			"kind: Service",
			"metadata:",
			"  name: $2",
			"  namespace: $1",
			"  labels:",
			"    app: $2",
			"    kubernetes.io/name: $2",
			"spec:",
			"  selector:",
			"    app: $2",
			"  ports:",
			"  - name: $2",
			"    port: $3",
			"    targetPort: $3",
			"  type: ClusterIP",
			"  # type: LoadBalancer",
			"  # loadBalancerIP: "
		]
	},
	"Ingress - Public": {
		"prefix": "ingress-public",
		"description": "Public Kubernetes Ingress with TLS",
		"body": [
			"apiVersion: extensions/v1beta1",
			"kind: Ingress",
			"metadata:",
			"  name: $2",
			"  namespace: $1",
			"  annotations:",
			"    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"",
			"    kubernetes.io/ingress.class: nginx",
			"  labels:",
			"    app: $2",
			"spec:",
			"  tls:",
			"  - hosts:",
			"    - $2.parlette.us",
			"    secretName: $2-tls",
			"  rules:",
			"  - host: $2.parlette.us",
			"    http:",
			"      paths:",
			"      - path: /",
			"        backend:",
			"          serviceName: $2",
			"          servicePort: $3"
		]
	},
	"Ingress - Internal": {
		"prefix": "ingress-internal",
		"description": "Internal Kubernetes Ingress",
		"body": [
			"apiVersion: extensions/v1beta1",
			"kind: Ingress",
			"metadata:",
			"  name: $2",
			"  namespace: $1",
			"  annotations:",
			"    kubernetes.io/tls-acme: \"false\"",
			"spec:",
			"  rules:",
			"  - host: $2.local.parlette.us",
			"    http:",
			"      paths:",
			"      - path: /",
			"        backend:",
			"          serviceName: $2",
			"          servicePort: 80"
		]
	}
}